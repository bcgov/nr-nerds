{"chunk":2,"numChunks":3,"fileHash":"6Hek5dWG2Q2c+dXGnvueo2+aPSzlf15yWSI/qxGcJ9o=","filePath":"project-board-sync/src/rules/linked-issues.js","content":"const { octokit } = require('../github/api');\nasync function processLinkedIssues(pullRequest, projectItemId, projectId, currentColumn) {\n  const { id: pullRequestId, number: pullRequestNumber, repository: { nameWithOwner: repositoryName }, state, merged } = pullRequest;\n  // Handle optional properties safely\n  const assigneeNodes = pullRequest.assignees?.nodes || [];\n  const linkedIssueNodes = pullRequest.linkedIssues?.nodes || [];\n  let changed = false;\n  let reason = '';\n  const linkedIssueResults = [];\n  log.info(`Processing linked issues for PR #${pullRequestNumber} in ${repositoryName}`);\n  // Log PR initial state\n  const prState = {\n    column: currentColumn || 'None',\n    assignees: assigneeNodes?.map(a => a.login) || [],\n    status: state || 'UNKNOWN',\n    merged: merged === true ? 'Yes' : merged === false ? 'No' : 'Unknown'\n  };\n  log.logState(pullRequestId, 'PR Initial', prState);\n  if (linkedIssueNodes.length === 0) {\n    reason = 'No linked issues';\n    log.info(`No linked issues found for PR #${pullRequestNumber}`);\n    log.logState(pullRequestId, 'PR Final - No Linked Issues', prState);\n    log.printStateSummary();\n    return { changed, reason, linkedIssues: linkedIssueResults };\n  }\n  if (state === 'CLOSED' && !merged) {\n    reason = 'PR is closed but not merged';\n    log.info(`Skipping closed but unmerged PR #${pullRequestNumber}`);\n    log.logState(pullRequestId, 'PR Final - Not Merged', prState);\n    log.printStateSummary();\n    return { changed, reason, linkedIssues: linkedIssueResults };\n  }"}