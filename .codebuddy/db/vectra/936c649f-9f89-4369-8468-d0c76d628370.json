{"chunk":5,"numChunks":7,"fileHash":"gb6b6Im3LfD8rgmCGtWZiKC1YeUBxIf7gW0fQ98Qg3g=","filePath":"project-board-sync/src/utils/__tests__/state-verifier-assignees.test.js","content":"const { test } = require('node:test');\ntest('verifyAssignees with real data (dry run)', async (t) => {\n  await t.test('should handle real project data correctly', async () => {\n    // Skip this test if we don't have real project data\n    const projectId = process.env.PROJECT_ID;\n    if (!projectId) {\n      console.log('Skipping real data test - no PROJECT_ID set');\n      return;\n    }\n\n    // Use a real PR from the project for testing\n    // This is a dry run - we won't actually modify anything\n    const { StateVerifier } = require('../state-verifier');\n    \n    // Get a real item from the project for testing\n    const { getItemColumn, isItemInProject } = require('../../github/api');\n    \n    // Find a real project item to test with\n    // This is just for testing the logic, not making changes\n    console.log('Testing with real project data (dry run mode)');\n    \n    // For now, just test that the function exists and can be called\n    // In a real scenario, we'd get actual project items\n    assert.ok(typeof StateVerifier.verifyAssignees === 'function', 'verifyAssignees should be a function');\n    \n    // Test the error handling for non-existent items\n    const fakeItem = {\n      type: 'PullRequest',\n      number: 999999, // Non-existent PR\n      id: 'PR_999999',\n      projectItemId: 'fake_project_item_id'\n    };\n\n    // This should fail gracefully with a proper error\n    await assert.rejects(\n      () => StateVerifier.verifyAssignees(fakeItem, projectId, ['user1', 'user2']),\n      (error) => {\n        // Should fail with a GraphQL error or similar\n        assert.ok(error.message.includes('Could not resolve') || \n                 error.message.includes('not found') ||\n                 error.message.includes('GraphqlResponseError"}