{"chunk":1,"numChunks":11,"fileHash":"pU2zJJcqjRS6lW9oTfu/r1to7SLWkYMY0S5Sf/l3wbo=","filePath":"project-board-sync/src/github/api.js","content":"const { Octokit } = require('@octokit/rest');\nasync function getColumnOptionId(projectId, columnName) {\n  // Create a composite cache\n  const cacheKey = `${projectId}:${columnName}`;\n\n  // Check if we have this column option ID cached\n  if (columnOptionIdCache.has(cacheKey)) {\n    return columnOptionIdCache.get(cacheKey);\n  }\n  try {\n    // Get all column options by field name (Status)\n    const result = await graphqlWithAuth(`\n      query($projectId: ID!, $fieldName: String!) {\n        node(id: $projectId) {\n          ... on ProjectV2 {\n            field(name: $fieldName) {\n              ... on ProjectV2SingleSelectField {\n                options {\n                  id\n                  name\n                }\n              }\n            }\n          }\n        }\n      }\n    `, {\n      projectId,\n      fieldName: 'Status'\n    });\n    // Find the option with matching name\n    const options = result.node.field.options;\n    const option = options.find(opt => opt.name === columnName);\n    if (option) {\n      // Cache the result\n      columnOptionIdCache.set(cacheKey, option.id);\n      return option.id;\n    }\n    log.error(`Column option \"${columnName}\" not found in project ${projectId}`);\n    return null;\n  } catch (error) {\n    log.error(`Failed to get column option ID for ${columnName}: ${error.message}`);\n    return null;\n  }\n}\n/**\n * Get all items from a project board with caching\n */"}