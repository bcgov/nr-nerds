{"chunk":14,"numChunks":15,"fileHash":"+gmoYfdkbC2PV76vr4sp0gIon+P84g0htDef3y71qAc=","filePath":"project-board-sync/src/utils/state-transition-validator.js","content":"/**\nclass StateTransitionValidator {\n  validateStateTransition(item, currentState, newState, context = {}) {\n    try {\n      // Check column transition if changing\n      if (newState.column && newState.column !== currentState.column) {\n        const result = this.validateColumnTransition(\n          currentState.column,\n          newState.column,\n          { ...context, item }\n        );\n        if (!result.valid) {\n          errors.push({\n            type: 'column',\n            message: result.reason,\n            details: result.details,\n            recovery: result.recovery\n          });\n        }\n      }\n      // Validate assignee changes with enhanced tracking\n      if (newState.assignees) {\n        const currentSet = new Set(currentState.assignees || []);\n        const newSet = new Set(newState.assignees);\n        \n        // Check for invalid removals\n        const removedAssignees = Array.from(currentSet).filter(a => !newSet.has(a));\n        if (removedAssignees.length > 0) {\n          errors.push({\n            type: 'assignees',\n            message: `Cannot remove assignees \"${removedAssignees.join(', ')}\" without explicit removal action`,\n            recovery: 'Use explicit assignee removal operation instead of direct state change'\n          });\n        }\n\n        // Check maximum assignees (if configured)\n        if (context.maxAssignees && newSet.size > context.maxAssignees) {\n          errors.push({\n            type: 'assignees',\n            message: `Maximum of ${context.maxAssignees} assignees allowed`,\n            current: newSet.size,\n            max: context.maxAssignees,\n            recovery: `Remove ${newSet.size - context.maxAssignees} assignee(s)`\n          });\n        }\n      }\n      // Track state changes"}