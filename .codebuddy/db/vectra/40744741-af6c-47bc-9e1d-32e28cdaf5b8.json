{"chunk":4,"numChunks":5,"fileHash":"0gCYPJSZnd96PlugTA16fXG42b/ldy/bm5L8l5rNp2k=","filePath":"project-board-sync/test/validation/env-defaults.test.js","content":"const test = require('node:test');\ntest('environment validation with defaults', async (t) => {\n  // Reset env before each test\n  t.beforeEach(resetEnv);\n  t.afterEach(resetEnv);\n  const config = await loadBoardRules();\n  await t.test('works with default project ID', async () => {\n    // Only set required variables\n    process.env.GITHUB_TOKEN = 'test-token';\n    process.env.GITHUB_AUTHOR = config.monitoredUser;\n    delete process.env.PROJECT_ID;\n\n    // Should not throw with default project ID\n    try {\n      await EnvironmentValidator.validateAll();\n      assert(true, 'Should not throw with default project ID');\n    } catch (error) {\n      // Expected to fail due to invalid token, but should not fail due to missing PROJECT_ID\n      assert(!error.message.includes('PROJECT_ID'), 'Should not fail due to missing PROJECT_ID');\n    }\n  });\n  await t.test('works with custom project ID', async () => {\n    process.env.GITHUB_TOKEN = 'test-token';\n    process.env.GITHUB_AUTHOR = config.monitoredUser;\n    process.env.PROJECT_ID = 'custom-id';\n\n    try {\n      await EnvironmentValidator.validateAll();\n      assert(true, 'Should not throw with custom project ID');\n    } catch (error) {\n      // Expected to fail due to invalid token, but should not fail due to PROJECT_ID\n      assert(!error.message.includes('PROJECT_ID'), 'Should not fail due to PROJECT_ID');\n    }\n  });"}