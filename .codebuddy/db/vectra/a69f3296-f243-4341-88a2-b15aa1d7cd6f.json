{"chunk":4,"numChunks":31,"fileHash":"d/sfK61LpWfXclxI64CLwQIr+HeWHt3JRwU/EIB4ZQc=","filePath":"project-board-sync/src/utils/state-verifier.js","content":"/**\nclass StateVerifier {\n  static initializeTransitionRules(rules) {\n    try {\n      validateRequired(rules, 'rules');\n      this.steps.validateStepCompleted('TRANSITION_VALIDATOR_CONFIGURED');\n\n      if (!rules.columns) return;\n\n      for (const rule of rules.columns) {\n        if (rule.validTransitions) {\n          for (const transition of rule.validTransitions) {\n            this.getTransitionValidator().addColumnTransitionRule(\n              transition.from,\n              transition.to,\n              transition.conditions\n            );\n          }\n        }\n      }\n\n      this.steps.markStepComplete('RULES_INITIALIZED');\n    } catch (error) {\n      if (error instanceof ValidationError) {\n        throw new StateVerifierError('Failed to initialize rules: Invalid configuration', {\n          originalError: error,\n          rules\n        });\n      }\n      throw error;\n    }\n  }\n  static validateState(item, state, rules) {\n    try {\n      validateRequired(item, 'item');\n      validateRequired(state, 'state');\n      validateRequired(rules, 'rules');\n\n      // Validate state with enhanced error context\n      validateState(state, rules, {\n        itemType: item.type,\n        itemNumber: item.number,\n        recoverySteps: [\n          'Verify state values match allowed values in rules',\n          'Check for typos in column names and sprint names',\n          'Ensure assignee usernames are correct'\n        ]\n      });\n\n      this.steps.markStepComplete('STATE_VALIDATED');\n    } catch (error) {\n      if (error instanceof ValidationError) {\n        throw new StateVerifierError('Invalid state', {\n          originalError: error,\n          item,\n          state,\n          recoverySteps: error.recoverySteps\n        });\n      }\n      throw error;\n    }\n  }"}