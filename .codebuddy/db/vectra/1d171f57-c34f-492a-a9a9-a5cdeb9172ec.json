{"chunk":9,"numChunks":10,"fileHash":"kYoYh4Mn0jAd2e8hiHojmvx60OErgciJ5WvzI8wa3jg=","filePath":"project-board-sync/src/rules/processors/__tests__/single-rule.test.js","content":"// Ensure test runner is available\ntest('PR authored by monitored user rule', async (t) => {\n    t.afterEach(() => {\n        // Clear mocks\n        delete require.cache[require.resolve('../shared-validator')];\n        delete require.cache[require.resolve('../../../config/board-rules')];\n        delete require.cache[require.resolve('../../../utils/log')];\n    });\n    await t.test('adds PR to board when authored by monitored user', async () => {\n        const testPR = await createMockPR({\n            number: 123,\n            repository: { nameWithOwner: 'test-org/test-repo' },\n            projectItems: { nodes: [] }\n        });\n\n        const actions = await processBoardItemRules(testPR);\n\n        assert.equal(actions.length, 1, 'should add PR to board');\n        assert.equal(actions[ 0 ].action, 'add_to_board', 'action should be add_to_board');\n        assert.deepEqual(actions[ 0 ].params, { item: testPR }, 'should include PR in params');\n        assert.ok(logMessages.some(msg => msg.includes('Rule PullRequest by Author triggered for PullRequest #123')),\n            'should log board addition');\n    });\n    await t.test('skips PR when already in project', async () => {\n        const testPR = await createMockPR({\n            number: 123,\n            repository: { nameWithOwner: 'test-org/test-repo' },\n            projectItems: { nodes: [ { id: 'exists' } ] }\n        });\n\n        const actions = await processBoardItemRules(testPR);\n\n        assert.equal(actions.length, 0, 'should skip PR already in project');\n        assert.ok(logMessages.some(msg => msg.includes('Skipping PullRequest #123')),\n            'should log skip reason');\n    });"}