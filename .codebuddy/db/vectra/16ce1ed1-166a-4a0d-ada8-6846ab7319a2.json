{"chunk":7,"numChunks":15,"fileHash":"+gmoYfdkbC2PV76vr4sp0gIon+P84g0htDef3y71qAc=","filePath":"project-board-sync/src/utils/state-transition-validator.js","content":"/**\nclass StateTransitionValidator {\n  validateColumnTransition(from, to, context = {}) {\n    try {\n      // Check if RULES_VALIDATED step is completed, but don't fail if it's not\n      // This allows the system to work even when no transition rules are defined\n      if (!this.steps.isStepCompleted('RULES_VALIDATED')) {\n        log.debug('RULES_VALIDATED step not completed - allowing transition (no rules defined)');\n        return { valid: true };\n      }\n      // Allow initial column setting\n      if (!from || from === 'None') {\n        return { valid: true };\n      }\n      // Normalize column names for comparison\n      const normalizedFrom = from.toLowerCase();\n      const normalizedTo = to.toLowerCase();\n      // No change\n      if (normalizedFrom === normalizedTo) {\n        return { valid: true };\n      }\n      // Check if source column has any rules\n      const rules = this.columnRules.get(normalizedFrom);\n      if (!rules) {\n        return {\n          valid: false,\n          reason: `No transitions defined from column \"${from}\"`,\n          recovery: `Add a transition rule from \"${from}\" to allow this change`\n        };\n      }\n      // Find matching rule with enhanced validation\n      const matchingRule = rules.find(rule => {\n        const ruleToLower = Array.isArray(rule.to) ? rule.to.map(t => t.toLowerCase()) : rule.to.toLowerCase();\n        if (Array.isArray(ruleToLower)) {\n          return ruleToLower.includes(normalizedTo);\n        }\n        return ruleToLower === normalizedTo;\n      });\n      if (!matchingRule) {\n        return {\n          valid: false,\n          reason: `Transition from \"${from}\" to \"${to}\" is not allowed`,\n          allowedTransitions: rules.map(r => r.to),\n          recovery: `Consider one of the allowed transitions: ${rules.map(r => r.to).join(', ')}`\n        };\n      }\n      // Check conditions if any with detailed failure"}