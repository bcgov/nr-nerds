{"chunk":6,"numChunks":11,"fileHash":"pU2zJJcqjRS6lW9oTfu/r1to7SLWkYMY0S5Sf/l3wbo=","filePath":"project-board-sync/src/github/api.js","content":"const { Octokit } = require('@octokit/rest');\nasync function getRecentItems(org, repos, monitoredUser) {\n  // Calculate 24 hours ago in ISO format\n  const since = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();\n  // Search for items in monitored repositories\n  const repoQueries = repos.map(repo => `repo:${org}/${repo} created:>${since}`);\n  const repoSearchQuery = repoQueries.join(' ');\n  // Search for PRs authored by monitored user in ANY repository\n  const authorSearchQuery = `author:${monitoredUser} created:>${since}`;\n  const results = [];\n  // Get items from monitored repositories\n  if (repoSearchQuery) {\n    const repoResult = await graphqlWithAuth(`\n      query($searchQuery: String!) {\n        search(query: $searchQuery, type: ISSUE, first: 100) {\n          nodes {\n            __typename\n            ... on Issue {\n              id\n              number\n              repository { nameWithOwner }\n              author { login }\n              assignees(first: 5) { nodes { login } }\n              updatedAt\n            }\n            ... on PullRequest {\n              id\n              number\n              repository { nameWithOwner }\n              author { login }\n              assignees(first: 5) { nodes { login } }\n              updatedAt\n            }\n          }\n        }\n      }\n    `, {\n      searchQuery: repoSearchQuery\n    });\n    \n    results.push(...repoResult.search.nodes);\n  }\n  // Get PRs authored by monitored user in any repository"}