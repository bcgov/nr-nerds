{"chunk":0,"numChunks":9,"fileHash":"hpOeWWIAZvnab09d0lSRqhqVpMCI1iVzBWQv3hmbhIQ=","filePath":"project-board-sync/src/rules/columns.js","content":"const { getItemColumn, setItemColumn, isItemInProject, octokit } = require('../github/api');\nconst { log } = require('../utils/log');\n// Cache column options per project ID during a single run\nconst columnOptionsCache = new Map();\n/**\n * Get status field configuration from project\n * Uses in-memory cache to avoid repeated API calls within a single run\n * @param {string} projectId - The project board ID\n * @returns {Promise<Map<string, string>>} Map of column names to option IDs\n */\nasync function getColumnOptions(projectId) {\n  // Check cache first\n  if (columnOptionsCache.has(projectId)) {\n    log.debug(`Using cached column options for project ${projectId}`);\n    return columnOptionsCache.get(projectId);\n  }\n\n  // Cache miss - fetch from API\n  log.debug(`Fetching column options for project ${projectId}`);\n  const result = await octokit.graphql(`\n    query($projectId: ID!) {\n      node(id: $projectId) {\n        ... on ProjectV2 {\n          field(name: \"Status\") {\n            ... on ProjectV2SingleSelectField {\n              options {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n  `, { projectId });\n\n  // Create mapping of column names to option IDs\n  const columnMap = new Map();\n  const options = result.node.field.options || [];\n  for (const opt of options) {\n    // Store both exact name and lowercase for case-insensitive lookup\n    columnMap.set(opt.name, opt.id);\n    columnMap.set(opt.name.toLowerCase(), opt.id);\n  }\n\n  // Cache the result\n  columnOptionsCache.set(projectId, columnMap);\n  \n  return columnMap;\n}"}