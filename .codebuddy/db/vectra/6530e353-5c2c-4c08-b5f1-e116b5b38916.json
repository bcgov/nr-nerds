{"chunk":1,"numChunks":9,"fileHash":"hpOeWWIAZvnab09d0lSRqhqVpMCI1iVzBWQv3hmbhIQ=","filePath":"project-board-sync/src/rules/columns.js","content":"const { getItemColumn, setItemColumn, isItemInProject, octokit } = require('../github/api');\n/**\n * Get the option ID for a column name\n * @param {string} columnName - The name of the column\n * @param {Map<string, string>} options - Column options mapping\n * @returns {string} The option ID\n * @throws {Error} If column not found\n */\nfunction getColumnOptionId(columnName, options) {\n  // Try exact match first, then case-insensitive\n  const optionId = options.get(columnName) || options.get(columnName.toLowerCase());\n  if (!optionId) {\n    // Get original case-sensitive column names, removing duplicates while preserving case\n    const uniqueColumns = [...new Set([...options.keys()].filter((k, i, arr) => \n      arr.findIndex(item => item.toLowerCase() === k.toLowerCase()) === i\n    ))];\n    throw new Error(`Column \"${columnName}\" not found in project. Available columns: ${uniqueColumns.join(', ')}`);\n  }\n  return optionId;\n}\n/**\n * Process column assignment for an item based on requirements\n * @param {Object} item - The issue or PR\n * @param {string} projectItemId - The project item ID\n * @param {string} projectId - The project board ID\n * @returns {Promise<{changed: boolean, newStatus?: string}>}\n */"}