{"chunk":2,"numChunks":3,"fileHash":"HdFwJyCNyzJqdk67eA8QF+gEGQHCdgZQRbrk67yUvaA=","filePath":"project-board-sync/src/utils/verification-steps.js","content":"/**\nclass StepVerification {\n  constructor(requiredSteps = []) {\n    this.completedSteps = new Set();\n    this.requiredSteps = requiredSteps;\n    this.stepDependencies = new Map();\n    this.log = new Logger();\n  }\n  /**\n   * Add a dependency between steps\n   * @param {string} step - The step that depends on others\n   * @param {string[]} dependencies - The steps this one depends on\n   */\n  addStepDependencies(step, dependencies) {\n    this.stepDependencies.set(step, dependencies);\n  }\n  /**\n   * Mark a verification step as completed\n   * @param {string} step - The step identifier\n   */\n  markStepComplete(step) {\n    // Validate dependencies first\n    const dependencies = this.stepDependencies.get(step) || [];\n    for (const dep of dependencies) {\n      if (!this.completedSteps.has(dep)) {\n        throw new Error(`Cannot complete ${step} - dependency ${dep} not completed`);\n      }\n    }\n\n    this.completedSteps.add(step);\n    this.log.debug(`Completed verification step: ${step}`);\n  }\n  /**\n   * Validate that a required step has been completed\n   * @param {string} step - The step identifier to check\n   * @throws {Error} If the step has not been completed\n   */\n  validateStepCompleted(step) {\n    if (!this.completedSteps.has(step)) {\n      throw new Error(`Required step not completed: ${step}`);\n    }\n  }\n  /**\n   * Check if a step has been completed (non-throwing version)\n   * @param {string} step - The step identifier to check\n   * @returns {boolean} True if the step has been completed\n   */\n  isStepCompleted(step) {\n    return this.completedSteps.has(step);\n  }\n  /**\n   * Check if all required steps are completed\n   * @returns {boolean} True if all required steps are complete\n   */"}