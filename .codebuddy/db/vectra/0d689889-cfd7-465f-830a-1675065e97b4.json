{"chunk":2,"numChunks":6,"fileHash":"xm9iJXhI0UZ96l+e+GixEyVteM5ZSAxnOCiKlbG9vwo=","filePath":"project-board-sync/src/rules/assignees.js","content":"const { octokit } = require('../github/api');\nasync function setItemAssignees(projectId, itemId, assigneeLogins) {\n  try {\n    // Get item details to get repository and number\n    const itemDetails = await getItemDetails(itemId);\n    if (!itemDetails || !itemDetails.content) {\n      throw new Error(`Could not get details for item ${itemId}`);\n    }\n\n    const { repository, number } = itemDetails.content;\n    const [owner, repo] = repository.nameWithOwner.split('/');\n    const isPullRequest = itemDetails.type === 'PullRequest';\n\n    // Set assignees on the actual PR/Issue (this is what matters most)\n    if (isPullRequest) {\n      await octokit.rest.pulls.update({\n        owner,\n        repo,\n        pull_number: number,\n        assignees: assigneeLogins\n      });\n      log.info(`Successfully set assignees on PR: ${assigneeLogins.join(', ')}`);\n    } else {\n      await octokit.rest.issues.update({\n        owner,\n        repo,\n        issue_number: number,\n        assignees: assigneeLogins\n      });\n      log.info(`Successfully set assignees on Issue: ${assigneeLogins.join(', ')}`);\n    }\n  } catch (error) {\n    log.error(`Failed to update assignees: ${error.message}`, true);\n    throw new Error(`Failed to update assignees: ${error.message}`);\n  }\n}\n/**\n * Implementation of Rule Set 5: Assignee Rules\n * \n * Uses YAML configuration to determine assignee actions\n * \n * @param {Object} item - The PR or Issue\n * @param {string} projectId - The project board ID\n * @param {string} itemId - The project item ID\n * @returns {Promise<{changed: boolean, assignees: string[], reason: string}>}\n */"}