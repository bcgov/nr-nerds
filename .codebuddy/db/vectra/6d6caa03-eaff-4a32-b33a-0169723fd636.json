{"chunk":0,"numChunks":1,"fileHash":"VCpYuB5YCnzGk6WxKGlEsyxixsB8dbGnSOTDz+/gBrQ=","filePath":"project-board-sync/test/mocks/github-api.js","content":"/**\n * @fileoverview Mock GitHub API functions for testing\n */\n/**\n * Mock state that simulates GitHub's API responses\n */\nconst mockState = {\n  // Project items in a cache-like structure\n  projectItems: new Map(),\n\n  // Mock responses that can be customized per test\n  responses: {\n    columnOptionId: 'mock-column-id',\n    inProject: true,\n    projectItemId: 'mock-project-item-id',\n    column: 'Active',\n    assignees: ['test-user'],\n    projectItems: {\n      nodes: [],\n      pageInfo: {\n        hasNextPage: false,\n        endCursor: null\n      }\n    }\n  }\n};\n/**\n * Mock getColumnOptionId function\n */\nasync function getColumnOptionId(projectId, columnName) {\n  return mockState.responses.columnOptionId;\n}\n/**\n * Mock getProjectItems GraphQL query\n */\nasync function getProjectItems(projectId) {\n  return mockState.responses.projectItems;\n}\n/**\n * Mock isItemInProject function\n * Now returns mocked response directly without calling actual GitHub API\n */\nasync function isItemInProject(nodeId, projectId) {\n  // If test is expecting a specific response, use that\n  if (mockState.responses.isItemInProject !== undefined) {\n    return {\n      isInProject: mockState.responses.isItemInProject,\n      projectItemId: mockState.responses.projectItemId\n    };\n  }\n\n  // Default behavior\n  return {\n    isInProject: true,\n    projectItemId: 'mock-project-item-id'\n  };\n}\n/**\n * Mock getItemColumn function\n */\nasync function getItemColumn(projectId, projectItemId) {\n  // Return cached value if one exists\n  const cached = mockState.projectItems.get(projectItemId)?.column;\n  if (cached) return cached;\n\n  // Otherwise return mock response\n  return mockState.responses.column;\n}\n/**\n * Mock getItemDetails function\n */"}