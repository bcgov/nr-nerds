{"chunk":0,"numChunks":1,"fileHash":"qVpMXAqb0YgTlsvAPURWRQu+I6CKsgcvUyWq89BqO/M=","filePath":"project-board-sync/test/mocks/test-board.test.js","content":"const { test } = require('node:test');\nconst assert = require('node:assert/strict');\nconst board = require('./test-board');\nconst { loadBoardRules } = require('../../src/config/board-rules');\n\nlet mockBoard;\n\ntest('Mock board data', async (t) => {\n  await t.test('setup', async () => {\n    // Clone board data to avoid modifying the original\n    mockBoard = JSON.parse(JSON.stringify(board));\n    assert.ok(mockBoard.items.length > 0, 'Should have items');\n  });\n\n  await t.test('item structure matches real data', async () => {\n    const item = mockBoard.items[0];\n    assert.ok(item.type === 'PULL_REQUEST' || item.type === 'ISSUE', 'Should have valid type');\n    assert.ok(item.content.title.startsWith('Test '), 'Should have sanitized title');\n    assert.ok(item.content.repository.nameWithOwner.startsWith('test-org/'), 'Should have sanitized repo');\n    assert.ok(item.id.startsWith('test-'), 'Should have test ID');\n  });\n\n  await t.test('field values structure', async () => {\n    const item = mockBoard.items[0];\n    const fields = item.fieldValues.nodes;\n    \n    const statusField = fields.find(f => f.field && f.field.name === 'Status');\n    assert.ok(statusField, 'Should have Status field');\n    assert.ok(['Backlog', 'Active', 'Review', 'Done', 'Next'].includes(statusField.name), \n      'Should have valid status');\n\n    const sprintField = fields.find(f => f.field && f.field.name === 'Sprint');\n    if (sprintField) {\n      assert.ok(sprintField.name.startsWith('Sprint '), 'Should have valid sprint name');\n    }\n  });\n});\n"}