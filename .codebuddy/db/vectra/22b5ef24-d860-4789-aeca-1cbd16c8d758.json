{"chunk":12,"numChunks":14,"fileHash":"BR3KeY/jHTO4rmaSfUa3V5AEhCmP6zXL1SL7tJnnCcM=","filePath":"project-board-sync/src/rules/processors/__tests__/unified-rule-processor.test.js","content":"const { test } = require('node:test');\ntest('Unified Rule Processor - All Rule Types', async (t) => {\n    await t.test('processAssigneeRules works as backward compatibility', async () => {\n        const item = {\n            __typename: 'PullRequest',\n            number: 123,\n            author: { login: 'test-user' },\n            assignees: { nodes: [] },\n            projectItems: { nodes: [] }\n        };\n\n        const actions = await processAssigneeRules(item);\n        \n        assert.equal(actions.length, 1, 'Should process one assignee rule');\n        assert.equal(actions[0].action, 'add_assignee: item.author', 'Should have correct action');\n    });\n    await t.test('processLinkedIssueRules works as backward compatibility', async () => {\n        const item = {\n            __typename: 'LinkedIssue',\n            number: 123,\n            pr: { closed: false, merged: true },\n            projectItems: { nodes: [] }\n        };\n\n        const actions = await processLinkedIssueRules(item);\n        \n        assert.equal(actions.length, 2, 'Should process two linked issue actions');\n        assert.equal(actions[0].action, 'inherit_column', 'Should have first action');\n        assert.equal(actions[1].action, 'inherit_assignees', 'Should have second action');\n    });\n    await t.test('skips board_items rules when already in project', async () => {\n        const item = {\n            __typename: 'PullRequest',\n            number: 123,\n            author: { login: 'test-user' },\n            projectItems: { nodes: [{ id: 'some-id' }] } // Already in project\n        };\n\n        const actions = await processRuleType(item, 'board_items');\n        \n        assert.equal(actions.length, 0, 'Should skip when already in project');\n    });"}