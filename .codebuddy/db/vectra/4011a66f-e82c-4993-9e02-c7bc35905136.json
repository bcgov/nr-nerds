{"chunk":2,"numChunks":11,"fileHash":"pU2zJJcqjRS6lW9oTfu/r1to7SLWkYMY0S5Sf/l3wbo=","filePath":"project-board-sync/src/github/api.js","content":"const { Octokit } = require('@octokit/rest');\nasync function getProjectItems(projectId) {\n  if (projectItemsCache.has(projectId)) {\n    return projectItemsCache.get(projectId);\n  }\n\n  const items = new Map();\n  let hasNextPage = true;\n  let endCursor = null;\n  let totalItems = 0;\n\n  while (hasNextPage && totalItems < 300) { // Safety limit\n    const result = await graphqlWithAuth(`\n      query($projectId: ID!, $cursor: String) {\n        node(id: $projectId) {\n          ... on ProjectV2 {\n            items(first: 100, after: $cursor) {\n              nodes {\n                id\n                content {\n                  ... on PullRequest {\n                    id\n                  }\n                  ... on Issue {\n                    id\n                  }\n                }\n              }\n              pageInfo {\n                hasNextPage\n                endCursor\n              }\n            }\n          }\n        }\n      }\n    `, {\n      projectId,\n      cursor: endCursor\n    });\n\n    const projectItems = result.node?.items?.nodes || [];\n    totalItems += projectItems.length;\n\n    for (const item of projectItems) {\n      if (item.content?.id) {\n        items.set(item.content.id, item.id);\n      }\n    }\n\n    hasNextPage = result.node?.items?.pageInfo?.hasNextPage || false;\n    endCursor = result.node?.items?.pageInfo?.endCursor;\n  }\n\n  projectItemsCache.set(projectId, items);\n  return items;\n}\n/**\n * Check if an item is already in the project board\n * @param {string} nodeId - The node ID of the item (PR or Issue)\n * @param {string} projectId - The project board ID\n * @returns {Promise<{isInProject: boolean, projectItemId?: string}>} - Whether the item is in the project and its project item ID if found\n */"}