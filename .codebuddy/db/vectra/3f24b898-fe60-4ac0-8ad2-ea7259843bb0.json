{"chunk":0,"numChunks":7,"fileHash":"C3p/lasysMy4RYnI/pWYiJsbVZnjjjhrj1Zu/ODsi/I=","filePath":"project-board-sync/src/rules/sprints.js","content":"const { octokit } = require('../github/api');\nconst { log } = require('../utils/log');\n// Columns eligible for sprint assignment\nconst ELIGIBLE_COLUMNS = ['Next', 'Active', 'Done', 'Waiting'];\n/**\n * Get current sprint information for a project item\n * @param {string} projectId - The project board ID\n * @param {string} itemId - The project item ID\n * @returns {Promise<{sprintId: string|null, sprintTitle: string|null}>}\n */\nasync function getItemSprint(projectId, itemId) {\n  const result = await octokit.graphql(`\n    query($projectId: ID!, $itemId: ID!) {\n      node(id: $projectId) {\n        ... on ProjectV2 {\n          field(name: \"Sprint\") {\n            ... on ProjectV2IterationField {\n              id\n              configuration {\n                iterations {\n                  id\n                  title\n                }\n              }\n            }\n          }\n        }\n      }\n      item: node(id: $itemId) {\n        ... on ProjectV2Item {\n          fieldValues(first: 1) {\n            nodes {\n              ... on ProjectV2ItemFieldIterationValue {\n                iterationId\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  `, {\n    projectId,\n    itemId\n  });\n\n  const fieldValues = result.item?.fieldValues.nodes || [];\n  const sprintValue = fieldValues[0];\n  \n  return {\n    sprintId: sprintValue?.iterationId || null,\n    sprintTitle: sprintValue?.title || null\n  };\n}\n/**\n * Get the current active sprint\n * @param {string} projectId - The project board ID\n * @returns {Promise<{sprintId: string, title: string}>}\n */"}