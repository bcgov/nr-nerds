{"chunk":0,"numChunks":2,"fileHash":"1zCGqhbgDomrRZLFU7BPN89ipu2igdNItv5wKm3dH8I=","filePath":"project-board-sync/src/config/board-rules.js","content":"const path = require('path');\nconst ConfigLoader = require('./loader');\n/**\n * Load the board rules configuration and normalize it for backward compatibility.\n * @returns {object} The parsed and validated configuration\n */\nfunction loadBoardRules(context = {}) {\n    const loader = new ConfigLoader();\n    const config = loader.load(path.join(__dirname, '../../config/rules.yml'));\n\n    // Pass through monitored user from context\n    if (context.monitoredUser) {\n        config.monitoredUser = context.monitoredUser;\n    }\n\n    // Normalize the new scope-based structure to the old flat structure for backward compatibility\n    if (config.automation) {\n        config.rules = mergeRuleScopes(config.automation);\n        config.project = {\n            ...config.project,\n            organization: config.automation.repository_scope.organization,\n            repositories: config.automation.repository_scope.repositories\n        };\n\n        // Extract monitored users from structured format for backward compatibility\n        const monitoredUsers = getMonitoredUsers(config.automation);\n        if (monitoredUsers && monitoredUsers.length > 0) {\n            // For backward compatibility, use the first user as the primary monitored user\n            config.monitoredUser = monitoredUsers[0];\n            // Store the full array for new functionality\n            config.monitoredUsers = monitoredUsers;\n        }\n        // Note: If no monitored users are configured, config.monitoredUser will be undefined\n        // This is handled gracefully by the rule processors\n    }\n\n    return config;\n}\n/**\n * Merge user_scope and repository_scope rules into a flat structure\n * @param {object} automation The automation configuration\n * @returns {object} Merged rules object\n */"}