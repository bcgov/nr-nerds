{"chunk":4,"numChunks":6,"fileHash":"xm9iJXhI0UZ96l+e+GixEyVteM5ZSAxnOCiKlbG9vwo=","filePath":"project-board-sync/src/rules/assignees.js","content":"const { octokit } = require('../github/api');\nasync function processAssignees(item, projectId, itemId) {\n  log.info(`\\nProcessing assignees for ${item.__typename || item.type} #${item.number}:`, true);\n  // Get current assignees from both project and Issue/PR\n  const currentAssignees = await getItemAssignees(projectId, itemId);\n  log.info(`  • Current assignees in project: ${currentAssignees.join(', ') || 'none'}`, true);\n  const itemDetails = await getItemDetails(itemId);\n  if (!itemDetails || !itemDetails.content) {\n    throw new Error(`Could not get details for item ${itemId}`);\n  }\n  const { repository, number } = itemDetails.content;\n  // Validate repository format before splitting\n  if (!repository || \n      typeof repository.nameWithOwner !== 'string' || \n      !repository.nameWithOwner.includes('/')) {\n    throw new Error(`Invalid repository.nameWithOwner format for item ${itemId}: ${repository?.nameWithOwner}`);\n  }\n  const [owner, repo] = repository.nameWithOwner.split('/');\n  const isPullRequest = itemDetails.type === 'PullRequest';\n  // Get current Issue/PR assignees\n  const issueOrPrData = isPullRequest\n    ? await octokit.rest.pulls.get({ owner, repo, pull_number: number })\n    : await octokit.rest.issues.get({ owner, repo, issue_number: number });\n  const repoAssignees = issueOrPrData.data.assignees.map(a => a.login);\n  log.info(`  • Current assignees in Issue/PR: ${repoAssignees.join(', ') || 'none'}`, true);\n  // Process assignee rules from YAML config\n  const assigneeActions = await processAssigneeRules(item);"}