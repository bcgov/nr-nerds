{"chunk":9,"numChunks":11,"fileHash":"pU2zJJcqjRS6lW9oTfu/r1to7SLWkYMY0S5Sf/l3wbo=","filePath":"project-board-sync/src/github/api.js","content":"const { Octokit } = require('@octokit/rest');\nasync function setItemColumn(projectId, projectItemId, optionId) {\n  // Get Status field ID from cache\n  const statusFieldId = await getFieldId(projectId, 'Status');\n\n  const mutation = `\n    mutation UpdateColumnValue($input: UpdateProjectV2ItemFieldValueInput!) {\n      updateProjectV2ItemFieldValue(input: $input) {\n        projectV2Item {\n          id\n          project {\n            id\n            number\n          }\n        }\n      }\n    }\n  `;\n\n  const input = {\n    projectId: projectId,\n    itemId: projectItemId,\n    fieldId: statusFieldId,\n    value: {\n      singleSelectOptionId: optionId,\n    },\n  };\n\n  try {\n    const result = await graphqlWithAuth(mutation, { input });\n    if (!result.updateProjectV2ItemFieldValue || !result.updateProjectV2ItemFieldValue.projectV2Item) {\n      log.error(`[API] setItemColumn: No projectV2Item returned for itemId=${projectItemId}, projectId=${projectId}, optionId=${optionId}`);\n      log.error(`[API] setItemColumn: Full response: ${JSON.stringify(result)}`);\n      throw new Error('setItemColumn: No projectV2Item in response');\n    }\n    log.info(`[API] setItemColumn: Successfully set column for itemId=${projectItemId} to optionId=${optionId}`);\n    return result;\n  } catch (error) {\n    log.error(`[API] setItemColumn: Failed to set column for itemId=${projectItemId}, projectId=${projectId}, optionId=${optionId}`);\n    log.error(`[API] setItemColumn: Error: ${error.stack || error}`);\n    throw error;\n  }\n}\n/**\n * Get field ID with caching\n * @param {string} projectId - The project board ID\n * @param {string} fieldName - The name of the field\n *"}