{"chunk":0,"numChunks":3,"fileHash":"lwC/JuSbCH/VHyv/YrVno9laOqi9/OMVZIokhtGJk8w=","filePath":"project-board-sync/src/utils/validation.js","content":"/**\n * @fileoverview Input validation and type checking utilities\n */\nconst { log } = require('./log');\nclass ValidationError extends Error {\n  constructor(message, context = {}) {\n    super(message);\n    this.name = 'ValidationError';\n    this.context = context;\n    this.recoverySteps = context.recoverySteps || [];\n    this.validationPath = context.field ? [context.field] : [];\n  }\n\n  addValidationContext(field) {\n    this.validationPath.unshift(field);\n    return this;\n  }\n\n  getDetailedMessage() {\n    let msg = this.message;\n    if (this.validationPath.length > 0) {\n      msg += `\\nValidation Path: ${this.validationPath.join('.')}`;\n    }\n    if (this.recoverySteps.length > 0) {\n      msg += '\\nRecovery Steps:\\n' + this.recoverySteps.map(step => `- ${step}`).join('\\n');\n    }\n    return msg;\n  }\n}\nfunction validateRequired(value, name, context = {}) {\n  if (value === undefined || value === null) {\n    throw new ValidationError(`Required value missing: ${name}`, { ...context, field: name });\n  }\n}\nfunction validateType(value, type, name, context = {}) {\n  if (value === undefined || value === null) return;\n\n  const actualType = Array.isArray(value) ? 'array' : typeof value;\n  if (actualType !== type) {\n    throw new ValidationError(\n      `Invalid type for ${name}: expected ${type}, got ${actualType}`,\n      { ...context, field: name, expectedType: type, actualType }\n    );\n  }\n}"}