{"chunk":1,"numChunks":6,"fileHash":"xm9iJXhI0UZ96l+e+GixEyVteM5ZSAxnOCiKlbG9vwo=","filePath":"project-board-sync/src/rules/assignees.js","content":"const { octokit } = require('../github/api');\nasync function getItemAssignees(projectId, itemId) {\n  const result = await octokit.graphql(`\n    query($projectId: ID!, $itemId: ID!) {\n      node(id: $projectId) {\n        ... on ProjectV2 {\n          field(name: \"Assignees\") {\n            ... on ProjectV2Field {\n              id\n            }\n          }\n        }\n      }\n      item: node(id: $itemId) {\n        ... on ProjectV2Item {\n          fieldValues(first: 10) {\n            nodes {\n              ... on ProjectV2ItemFieldUserValue {\n                field {\n                  ... on ProjectV2Field {\n                    name\n                  }\n                }\n                users(first: 10) {\n                  nodes {\n                    login\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `, {\n    projectId,\n    itemId\n  });\n\n  const fieldValues = result.item?.fieldValues.nodes || [];\n  const assigneeValue = fieldValues.find(v => v.field?.name === 'Assignees');\n  \n  if (!assigneeValue) {\n    return [];\n  }\n\n  return assigneeValue.users?.nodes?.map(u => u.login) || [];\n}\n/**\n * Set assignees for a project item\n * @param {string} projectId - The project board ID\n * @param {string} itemId - The project item ID\n * @param {string[]} assigneeLogins - Array of assignee logins\n * @returns {Promise<void>}\n */"}