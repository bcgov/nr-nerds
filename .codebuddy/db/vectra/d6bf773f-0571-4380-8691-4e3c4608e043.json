{"chunk":7,"numChunks":10,"fileHash":"/mSGO8x4OLXB/1eOYvaNYp72b4aSi8qyhJRzeELq3O8=","filePath":"project-board-sync/src/rules/processors/unified-rule-processor.js","content":"/**\nasync function processRuleType(item, ruleType) {\n    try {\n        for (const rule of rules) {\n            try {\n                // Special handling for board_items rules\n                if (ruleType === 'board_items') {\n                    // Skip if already in project (skip condition)\n                    if (item.projectItems?.nodes?.length > 0) {\n                        log.info(`Skipping ${item.__typename} #${item.number} - Already in project`);\n                        continue;\n                    }\n                }\n\n                // Skip rule if conditions not met (backward compatibility for skipIf/skip_if)\n                // Support both 'skip_if' (legacy) and 'skipIf' (preferred) for backward compatibility.\n                // TODO: Standardize on 'skipIf' in future releases and migrate existing configs.\n                const skipCondition = rule.skip_if ?? rule.skipIf;\n                if (skipCondition && validator.validateSkipRule(item, skipCondition)) {\n                    continue;\n                }\n\n                // Check trigger conditions\n                if (validator.validateItemCondition(item, rule.trigger)) {\n                    const action = formatAction(rule, ruleType);\n                    const params = { item };\n                    \n                    // Special handling for assignee rules\n                    if (ruleType === 'assignees') {\n                        params.assignee = rule.value;\n                    }\n                    \n                    // Special handling for linked issues rules\n                    if (ruleType === 'linked_issues') {\n                        const ruleActions = Array.isArray(rule.action) ? rule.action : [rule.action];\n                        params.rule = rule.name;\n                        params.actions = ruleActions;\n                        \n                        // Create separate action for each rule action\n                        for (const actionItem of ruleActions) {\n                            actions.push({\n                                action: actionItem,\n                                params\n                            });\n                        }\n                        continue; // Skip the default action push below\n                    }\n                    \n                    actions.push({\n                        action,\n                        params\n                    });\n                    log.info(`Rule ${rule.name} triggered for ${item.__typename} #${item.number"}