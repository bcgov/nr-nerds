{"chunk":4,"numChunks":8,"fileHash":"hKsOh/m4Sgq4KMqQOzRHKQkneoBEEeIk7iqfEPwsUBQ=","filePath":"project-board-sync/src/utils/state-changes.js","content":"/**\nclass StateChangeTracker {\n  recordError(item, type, error, attempt) {\n    const key = `${item.type}#${item.number}`;\n    if (!this.errors.has(key)) {\n      this.errors.set(key, []);\n    }\n    this.errors.get(key).push({\n      type,\n      error: error.message,\n      attempt,\n      timestamp: new Date()\n    });\n  }\n  /**\n   * Update timing statistics\n   */\n  updateTimingStats(type, duration, attempts) {\n    if (!this.timingStats.verificationCounts[type]) {\n      this.timingStats.verificationCounts[type] = 0;\n      this.timingStats.averageDurations[type] = 0;\n      this.timingStats.maxRetries[type] = 0;\n    }\n\n    // Update counts and averages\n    const count = ++this.timingStats.verificationCounts[type];\n    const oldAvg = this.timingStats.averageDurations[type];\n    this.timingStats.averageDurations[type] = oldAvg + (duration - oldAvg) / count;\n    this.timingStats.totalDuration += duration;\n\n    // Track max retries\n    if (attempts > this.timingStats.maxRetries[type]) {\n      this.timingStats.maxRetries[type] = attempts;\n    }\n  }\n  /**\n   * Print a summary of state changes with enhanced statistics\n   */"}