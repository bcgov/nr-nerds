{"chunk":30,"numChunks":31,"fileHash":"d/sfK61LpWfXclxI64CLwQIr+HeWHt3JRwU/EIB4ZQc=","filePath":"project-board-sync/src/utils/state-verifier.js","content":"/**\nclass StateVerifier {\n  static async retryWithTracking(item, type, operation, description) {\n    const MAX_RETRIES = 3;\n    let lastError;\n    let lastState = this.getState(item);\n\n    for (let attempt = 1; attempt <= MAX_RETRIES; attempt++) {\n      try {\n        const result = await operation(attempt, lastState);\n        lastState = {\n          ...lastState,\n          ...(typeof result === 'object' ? result : {})\n        };\n        return result;\n      } catch (error) {\n        lastError = error;\n        this.tracker.recordError(item, type, error, attempt);\n\n        // Only retry if error is marked as retryable\n        if (attempt < MAX_RETRIES && (error.retryable || error.isRetryable)) {\n          const delay = Math.min(Math.pow(2, attempt - 1) * 1000, 5000);\n          log.info(`\nâŒ› ${type} verification attempt ${attempt}/${MAX_RETRIES}\n   Item: ${item.type} #${item.number}\n   Current State: ${JSON.stringify(lastState, null, 2)}\n   Error: ${error.message}\n   Recovery Steps:\\n${error.recoverySteps?.map(s => `   - ${s}`).join('\\n') || '   None provided'}\n   Retrying in ${delay / 1000}s...`);\n          await sleep(delay);\n          continue;\n        }\n        throw error;\n      }\n    }\n\n    throw new StateVerifierError(\n      `Failed to verify ${description} after ${MAX_RETRIES} attempts: ${lastError.message}`,\n      {\n        itemType: item.type,\n        itemNumber: item.number,\n        lastError,\n        lastState\n      }\n    );\n  }"}