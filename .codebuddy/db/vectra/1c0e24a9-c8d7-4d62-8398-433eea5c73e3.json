{"chunk":4,"numChunks":5,"fileHash":"yix1TCRuVVv0rsZnFwm2udlcpDsBaaoVo6bcFD0LUcI=","filePath":"project-board-sync/test/environment-validation.test.js","content":"const test = require('node:test');\ntest('Environment validation works correctly', async (t) => {\n  // Test 1: Missing required variables\n  const originalToken = process.env.GITHUB_TOKEN;\n  const originalAuthor = process.env.GITHUB_AUTHOR;\n  // Remove required variables\n  delete process.env.GITHUB_TOKEN;\n  delete process.env.GITHUB_AUTHOR;\n  try {\n    await EnvironmentValidator.validateAll();\n    assert.fail('Should have thrown an error for missing variables');\n  } catch (error) {\n    assert(error.message.includes('Missing required environment variables'));\n    assert(error.message.includes('GITHUB_TOKEN'));\n    assert(error.message.includes('GITHUB_AUTHOR'));\n    assert(true, 'Correctly caught missing environment variables');\n  }\n  // Restore variables\n  process.env.GITHUB_TOKEN = originalToken;\n  process.env.GITHUB_AUTHOR = originalAuthor;\n  // Test 2: Valid environment (if we have the variables set)\n  if (originalToken && originalAuthor) {\n    try {\n      const config = await EnvironmentValidator.validateAll();\n      assert(config.githubUser, 'Should return GitHub user');\n      assert(config.projectId, 'Should return project ID');\n      assert(typeof config.verbose === 'boolean', 'Should return verbose flag');\n      assert(true, 'Environment validation passed with valid variables');\n    } catch (error) {\n      assert.fail(`Environment validation failed (this is expected if token is invalid): ${error.message}`);\n    }\n  } else {\n    assert(true, 'Skipping valid environment test - variables not set');\n  }\n  // Test 3: Required variables validation\n  try {\n    EnvironmentValidator.validateRequired();\n    assert(true, 'Required variables validation passed');\n  } catch (error) {\n    assert.fail(`Required variables validation failed: ${error.message}`);\n  }\n  // Test 4: Optional variables validation"}