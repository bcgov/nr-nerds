{"chunk":0,"numChunks":11,"fileHash":"pU2zJJcqjRS6lW9oTfu/r1to7SLWkYMY0S5Sf/l3wbo=","filePath":"project-board-sync/src/github/api.js","content":"const { Octokit } = require('@octokit/rest');\nconst { graphql } = require('@octokit/graphql');\nconst { log } = require('../utils/log');\n/**\n * GitHub API client setup\n */\nconst octokit = new Octokit({\n  auth: process.env.GITHUB_TOKEN\n});\n// Create authenticated GraphQL client with debug logging\nconst graphqlWithAuth = graphql.defaults({\n  headers: {\n    authorization: `bearer ${process.env.GITHUB_TOKEN}`,\n  },\n  request: {\n    fetch: (url, options) => {\n      log.debug('GraphQL Request:', JSON.stringify(options.body, null, 2));\n      return fetch(url, options).then(response => {\n        log.debug('GraphQL Response:', response.status);\n        return response;\n      });\n    }\n  }\n});\n// Cache field IDs per project to reduce API calls\nconst fieldIdCache = new Map();\n// Cache for column option IDs\nconst columnOptionIdCache = new Map();\n// Cache project items during a single run\nconst projectItemsCache = new Map();\n/**\n * Get the column option ID for a given column name\n * @param {string} projectId - The project board ID\n * @param {string} columnName - The name of the column (Status field option)\n * @returns {Promise<string|null>} The column option ID or null if not found\n */"}