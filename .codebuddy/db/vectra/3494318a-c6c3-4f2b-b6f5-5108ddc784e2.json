{"chunk":14,"numChunks":31,"fileHash":"d/sfK61LpWfXclxI64CLwQIr+HeWHt3JRwU/EIB4ZQc=","filePath":"project-board-sync/src/utils/state-verifier.js","content":"/**\nclass StateVerifier {\n  static async verifyAssignees(item, projectId, expectedAssignees) {\n    return this.retryWithTracking(\n      async (attempt) => {\n        // Get assignees from both project board and Issue/PR\n        const projectAssignees = await getItemAssignees(projectId, item.projectItemId);\n        const itemDetails = await getItemDetails(item.projectItemId);\n        if (!itemDetails || !itemDetails.content) {\n          verifierLog.error(`Could not get details for item ${item.projectItemId}`);\n          throw new Error(`Could not get details for item ${item.projectItemId}`);\n        }\n        // Get Issue/PR assignees via REST API\n        const { repository, number } = itemDetails.content;\n        const [ owner, repo ] = repository.nameWithOwner.split('/');\n        const issueOrPrData = itemDetails.type === 'PullRequest'\n          ? await octokit.rest.pulls.get({ owner, repo, pull_number: number })\n          : await octokit.rest.issues.get({ owner, repo, issue_number: number });\n        const repoAssignees = issueOrPrData.data.assignees.map(a => a.login);\n        // Verify both are in sync\n        const afterState = this.updateState(item, { assignees: projectAssignees });\n        this.tracker.recordChange(\n          item,\n          'Assignee Verification',\n          beforeState,\n          afterState,\n          attempt\n        );\n        // Compare project board assignees with expected\n        const missingInProject = expectedAssignees.filter(a => !projectAssignees.includes(a));\n        const extraInProject = projectAssignees.filter(a => !expectedAssignees.includes(a));\n        // Compare Issue/PR assignees with expected\n        const missingInRepo = expectedAssignees.filter(a => !repoAssignees.includes(a));\n        const extraInRepo = repoAssignees.filter(a => !expectedAssignees.includes(a));"}