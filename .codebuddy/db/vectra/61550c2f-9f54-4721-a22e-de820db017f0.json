{"chunk":3,"numChunks":11,"fileHash":"pU2zJJcqjRS6lW9oTfu/r1to7SLWkYMY0S5Sf/l3wbo=","filePath":"project-board-sync/src/github/api.js","content":"const { Octokit } = require('@octokit/rest');\nasync function isItemInProject(nodeId, projectId) {\n  try {\n    // First check the cache\n    const projectItems = await getProjectItems(projectId, true);\n    const projectItemId = projectItems.get(nodeId);\n\n    // If found in cache, return immediately\n    if (projectItemId) {\n      return {\n        isInProject: true,\n        projectItemId\n      };\n    }\n\n    // If not in cache, query the project items directly\n    const result = await graphqlWithAuth(`\n      query($projectId: ID!) {\n        node(id: $projectId) {\n          ... on ProjectV2 {\n            items(first: 100) {\n              nodes {\n                id\n                content {\n                  ... on PullRequest {\n                    id\n                  }\n                  ... on Issue {\n                    id\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    `, {\n      projectId\n    });\n\n    // Find the item that matches our nodeId\n    const matchingItem = result.node?.items?.nodes?.find(item =>\n      item.content?.id === nodeId\n    );\n\n    if (matchingItem) {\n      // Update cache with the found item\n      projectItems.set(nodeId, matchingItem.id);\n      return {\n        isInProject: true,\n        projectItemId: matchingItem.id\n      };\n    }\n\n    return { isInProject: false };\n\n  } catch (error) {\n    log.error(`Failed to check if item ${nodeId} is in project: ${error.message}`);\n    throw error;\n  }\n}\n/**\n * Add an item to the project board\n * @param {string} nodeId - The node ID of the item (PR or Issue)\n * @param {string} projectId - The project board ID\n * @returns {Promise<string>} - The project item ID\n */"}