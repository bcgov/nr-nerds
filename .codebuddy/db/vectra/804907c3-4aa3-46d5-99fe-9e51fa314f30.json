{"chunk":2,"numChunks":3,"fileHash":"lwC/JuSbCH/VHyv/YrVno9laOqi9/OMVZIokhtGJk8w=","filePath":"project-board-sync/src/utils/validation.js","content":"/**\nfunction validateState(state, rules, context = {}) {\n  try {\n    // Validate column enum values\n    if (state.column) {\n      validateEnum(\n        state.column, \n        rules.columns.map(r => r.name),\n        'column',\n        context\n      );\n    }\n\n    // Validate sprint values  \n    if (state.sprint) {\n      validateEnum(\n        state.sprint,\n        ['None', 'current', ...rules.sprints.map(r => r.name)],\n        'sprint',\n        context\n      );\n    }\n\n    // Validate assignees with enhanced error context\n    if (state.assignees) {\n      validateType(state.assignees, 'array', 'assignees', {\n        ...context,\n        recoverySteps: [\n          'Ensure assignees is provided as an array of usernames',\n          'Convert single assignee string to array if needed'\n        ]\n      });\n      \n      state.assignees.forEach((assignee, index) => {\n        validateType(assignee, 'string', `assignees[${index}]`, {\n          ...context,\n          recoverySteps: [\n            'Verify assignee username is a string',\n            'Check if username exists in the organization'\n          ]\n        });\n      });\n    }\n  } catch (error) {\n    if (error instanceof ValidationError) {\n      error.addValidationContext('state');\n    }\n    throw error;\n  }\n}"}