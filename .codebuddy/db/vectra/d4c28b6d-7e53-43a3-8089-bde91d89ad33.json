{"chunk":0,"numChunks":1,"fileHash":"M/B5/3A1A35Li3j4RjLt4Cngqvn9y9D/+ATm/BmiWTM=","filePath":"project-board-sync/src/utils/batch.js","content":"const { log } = require('./log');\n/**\n * Default batch processing options\n */\nconst DEFAULT_OPTIONS = {\n  batchSize: 10,\n  delayBetweenBatches: 1000,\n  maxRetries: 3,\n  retryDelay: 5000\n};\n/**\n * Process items in batches with rate limiting and retries\n * @param {Array} items - Array of items to process\n * @param {Function} processItem - Async function to process a single item\n * @param {Object} options - Processing options\n * @returns {Promise<{processed: number, errors: number}>}\n */\nasync function processBatch(items, processItem, options = {}) {\n  const opts = { ...DEFAULT_OPTIONS, ...options };\n  let processed = 0;\n  let errors = 0;\n\n  for (let i = 0; i < items.length; i += opts.batchSize) {\n    const batch = items.slice(i, i + opts.batchSize);\n    \n    for (const item of batch) {\n      let retries = 0;\n      let success = false;\n\n      while (!success && retries < opts.maxRetries) {\n        try {\n          await processItem(item);\n          processed++;\n          success = true;\n        } catch (error) {\n          retries++;\n          log.warn(`Failed to process item (attempt ${retries}/${opts.maxRetries}):`, error.message);\n          \n          if (retries < opts.maxRetries) {\n            await delay(opts.retryDelay);\n          } else {\n            errors++;\n            log.error(`Failed to process item after ${opts.maxRetries} attempts:`, error.message);\n          }\n        }\n      }\n    }\n\n    // Delay between batches to respect rate limits\n    if (i + opts.batchSize < items.length) {\n      await delay(opts.delayBetweenBatches);\n    }\n  }\n\n  return { processed, errors };\n}"}