{"chunk":2,"numChunks":8,"fileHash":"hKsOh/m4Sgq4KMqQOzRHKQkneoBEEeIk7iqfEPwsUBQ=","filePath":"project-board-sync/src/utils/state-changes.js","content":"/**\nclass StateChangeTracker {\n  constructor() {\n    this.changes = new Map();\n    this.startTimes = new Map();\n    this.errors = new Map();\n    this.currentState = new Map(); // Track current state for each item\n    this.timingStats = {\n      totalDuration: 0,\n      verificationCounts: {},\n      averageDurations: {},\n      maxRetries: {},\n    };\n  }\n  /**\n   * Start tracking changes for an item\n   */\n  startTracking(item) {\n    const key = `${item.type}#${item.number}`;\n    this.startTimes.set(key, Date.now());\n    this.changes.set(key, []);\n    \n    // Initialize with meaningful initial state\n    const initialState = {\n      inProject: item.projectItems?.nodes?.length > 0,\n      projectItemId: item.projectItems?.nodes?.[0]?.id || null\n    };\n    this.currentState.set(key, initialState);\n  }\n  /**\n   * Record a state change\n   */\n  recordChange(item, type, before, after, attemptCount = 1) {\n    const key = `${item.type}#${item.number}`;\n    const changes = this.changes.get(key) || [];\n    \n    // Get the last known state\n    const lastChange = changes[changes.length - 1];\n    const currentState = lastChange ? lastChange.after : {};\n    \n    // Create new state by merging current with after\n    const newState = {\n      ...currentState,\n      ...after\n    };\n    \n    changes.push({\n      type,\n      timestamp: new Date(),\n      before: attemptCount === 1 ? before : currentState,\n      after: newState,\n      attemptCount,\n      duration: Date.now() - this.startTimes.get(key)\n    });\n\n    this.changes.set(key, changes);\n    \n    // Update timing stats\n    this.updateTimingStats(type, changes[changes.length - 1].duration, attemptCount);\n  }\n  /**\n   * Track verification error\n"}