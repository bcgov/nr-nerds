{"chunk":6,"numChunks":7,"fileHash":"C3p/lasysMy4RYnI/pWYiJsbVZnjjjhrj1Zu/ODsi/I=","filePath":"project-board-sync/src/rules/sprints.js","content":"const { octokit } = require('../github/api');\nasync function processSprintAssignment(item, projectItemId, projectId, currentColumn) {\n  try {\n    const { sprintId: activeSprintId, title: activeSprintTitle } = \n      await getCurrentSprint(projectId);\n    log.info(`  • Active sprint: ${activeSprintTitle} (${activeSprintId})`);\n    // Check skip conditions - different rules for Done vs Active/Next\n    if (currentColumn === 'Done') {\n      // For Done: skip if ANY sprint is set\n      if (currentSprintId) {\n        log.info(`  • Skip: Item in Done has a sprint set (${currentSprintTitle})`);\n        return {\n          changed: false,\n          reason: `Item in Done has sprint set (${currentSprintTitle})`\n        };\n      }\n    }\n    // For Active/Next: No skip conditions - always set to current sprint\n    // Get the Sprint field ID\n    const sprintFieldResult = await octokit.graphql(`\n      query($projectId: ID!) {\n        node(id: $projectId) {\n          ... on ProjectV2 {\n            field(name: \"Sprint\") {\n              ... on ProjectV2IterationField {\n                id\n              }\n            }\n          }\n        }\n      }\n    }`, { projectId });\n    const sprintFieldId = sprintFieldResult.node.field.id;\n    log.info(`  • Action: Assigning to sprint ${activeSprintTitle}`);\n    // Set the sprint"}