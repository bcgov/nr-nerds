{"chunk":0,"numChunks":1,"fileHash":"cX8pZFxkXLprj8I9KVNXOCZGP6bJX44cO9NOSntoQvQ=","filePath":"project-board-sync/src/config/loader.js","content":"/**\n * @fileoverview Configuration loader for project board sync\n * @see /src/index.js for project conventions and architecture\n * \n * @directive Always run all tests after modifying this file:\n * ```bash\n * npm test\n * ```\n * This file affects all rule processing, so full test coverage is essential.\n * \n * Module Conventions:\n * - YAML-based configuration in rules.yml\n * - Schema validation enforced for all configs\n * - Config validation errors provide detailed feedback\n * - Environment variable fallbacks supported\n */\n\nconst yaml = require('js-yaml');\nconst fs = require('fs');\nconst path = require('path');\nconst Ajv = require('ajv');\nconst schema = require('./schema');\n\nclass ConfigLoader {\n  constructor() {\n    this.ajv = new Ajv();\n    this.validate = this.ajv.compile(schema);\n  }\n\n  load(configPath) {\n    try {\n      const fileContents = fs.readFileSync(configPath, 'utf8');\n      const config = yaml.load(fileContents);\n      \n      if (!this.validate(config)) {\n        const errors = this.validate.errors;\n        throw new Error(`Invalid configuration: ${JSON.stringify(errors, null, 2)}`);\n      }\n\n      return config;\n    } catch (error) {\n      if (error.code === 'ENOENT') {\n        throw new Error(`Configuration file not found: ${configPath}`);\n      }\n      throw error;\n    }\n  }\n}\n\nmodule.exports = ConfigLoader;\n"}