{"chunk":9,"numChunks":10,"fileHash":"JyGXkSXfqfji/jvY1IWvGDwkrzgkd6gnhZdRmuKn98M=","filePath":"project-board-sync/src/rules/add-items.js","content":"const { isItemInProject, addItemToProject, getRecentItems } = require('../github/api');\nasync function processItemForProject(item, projectId, context) {\n  // Skip if already processed\n  if (context.processedIds.has(item.id)) {\n    return { added: false, reason: 'Already processed' };\n  }\n  context.processedIds.add(item.id);\n\n  // Check if it should be added based on requirements\n  if (!shouldAddItemToProject(item, context.monitoredUser, context.monitoredRepos)) {\n    return { added: false, reason: 'Does not match add criteria' };\n  }\n\n  // Check if already in project\n  const { isInProject, projectItemId } = await isItemInProject(item.id, projectId);\n  if (isInProject) {\n    return { added: false, projectItemId, reason: 'Already in project' };\n  }\n\n  // Add to project\n  const newProjectItemId = await addItemToProject(item.id, projectId);\n  return {\n    added: true,\n    projectItemId: newProjectItemId,\n    reason: `Added as ${item.__typename} from ${item.repository.nameWithOwner}`\n  };\n}\n/**\n * Determine if an item should be added to the project board based on requirements\n * @param {Object} item - The issue or PR\n * @param {string} monitoredUser - The GitHub username being monitored\n * @param {Set<string>} monitoredRepos - Set of monitored repository full names (e.g. 'bcgov/nr-nerds')\n * @returns {boolean} Whether the item should be added\n */"}