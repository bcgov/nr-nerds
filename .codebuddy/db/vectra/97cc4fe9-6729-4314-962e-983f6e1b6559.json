{"chunk":8,"numChunks":11,"fileHash":"pU2zJJcqjRS6lW9oTfu/r1to7SLWkYMY0S5Sf/l3wbo=","filePath":"project-board-sync/src/github/api.js","content":"const { Octokit } = require('@octokit/rest');\nasync function getItemColumn(projectId, itemId) {\n  const result = await graphqlWithAuth(`\n    query($projectId: ID!, $itemId: ID!) {\n      node(id: $projectId) {\n        ... on ProjectV2 {\n          field(name: \"Status\") {\n            ... on ProjectV2SingleSelectField {\n              id\n              options {\n                id\n                name\n              }\n            }\n          }\n        }\n      }\n      item: node(id: $itemId) {\n        ... on ProjectV2Item {\n          fieldValues(first: 10) {\n            nodes {\n              ... on ProjectV2ItemFieldSingleSelectValue {\n                name\n                field {\n                  ... on ProjectV2SingleSelectField {\n                    name\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `, {\n    projectId,\n    itemId\n  });\n\n  const fieldValues = result.item?.fieldValues.nodes || [];\n  const statusValue = fieldValues.find(value =>\n    value.field && value.field.name === 'Status'\n  );\n\n  return statusValue ? statusValue.name : null;\n}\n/**\n * Set the column (Status field) for a project item\n * @param {string} projectId - The project board ID\n * @param {string} itemId - The project item ID\n * @param {string} optionId - The status option ID to set\n * @returns {Promise<void>}\n */"}