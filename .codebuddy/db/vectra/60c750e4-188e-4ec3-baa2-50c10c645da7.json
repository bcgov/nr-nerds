{"chunk":6,"numChunks":31,"fileHash":"d/sfK61LpWfXclxI64CLwQIr+HeWHt3JRwU/EIB4ZQc=","filePath":"project-board-sync/src/utils/state-verifier.js","content":"/**\nclass StateVerifier {\n  static async verifyAddition(item, projectId) {\n    this.tracker.startTracking(item);\n    const beforeState = this.getState(item);\n\n    return this.retryWithTracking(\n      item,\n      'Project Addition',\n      async (attempt) => {\n        // Add exponential backoff delay between retries\n        if (attempt > 1) {\n          const delay = Math.min(1000 * Math.pow(2, attempt - 1), 5000);\n          log.info(`Retry ${attempt}: Waiting ${delay}ms before checking project status...`);\n          await new Promise(resolve => setTimeout(resolve, delay));\n        }\n\n        const { isInProject, projectItemId } = await isItemInProject(item.id, projectId);\n        const afterState = this.updateState(item, {\n          inProject: true,\n          projectItemId\n        });\n\n        this.tracker.recordChange(\n          item,\n          'Project Addition',\n          beforeState,\n          afterState,\n          attempt\n        );\n\n        if (!isInProject) {\n          const error = new Error(`Item ${item.type} #${item.number} was not added to project`);\n          error.isRetryable = true; // Mark as retryable for eventual consistency\n          throw error;\n        }\n\n        log.info(`âœ“ ${item.type} #${item.number} verified in project (attempt ${attempt}/3)`);\n        return afterState;\n      },\n      `project addition for ${item.type} #${item.number}`\n    );\n  }"}