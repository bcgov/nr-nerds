{"chunk":0,"numChunks":6,"fileHash":"xm9iJXhI0UZ96l+e+GixEyVteM5ZSAxnOCiKlbG9vwo=","filePath":"project-board-sync/src/rules/assignees.js","content":"const { octokit } = require('../github/api');\nconst { log } = require('../utils/log');\nconst { processAssigneeRules } = require('./processors/unified-rule-processor');\n/**\n * Get details about a project item including its linked content\n * @param {string} itemId - The project item ID\n * @returns {Promise<Object>} Item details including repository info\n */\nasync function getItemDetails(itemId) {\n  try {\n    const result = await octokit.graphql(`\n      query($itemId: ID!) {\n        node(id: $itemId) {\n          ... on ProjectV2Item {\n            id\n            type\n            content {\n              ... on Issue {\n                id\n                number\n                repository {\n                  nameWithOwner\n                }\n              }\n              ... on PullRequest {\n                id\n                number\n                repository {\n                  nameWithOwner\n                }\n              }\n            }\n          }\n        }\n      }\n    `, {\n      itemId\n    });\n    \n    return result.node;\n  } catch (error) {\n    log.error(`Failed to get item details: ${error.message}`);\n    return null;\n  }\n}\n/**\n * Compare two arrays for equality\n * @param {Array} a - First array\n * @param {Array} b - Second array\n * @returns {boolean}\n */\nfunction arraysEqual(a, b) {\n  if (a.length !== b.length) return false;\n  const sortedA = [...a].sort();\n  const sortedB = [...b].sort();\n  return sortedA.every((val, idx) => val === sortedB[idx]);\n}\n/**\n * Get assignees for a project item\n * @param {string} projectId - The project board ID\n * @param {string} itemId - The project item ID\n * @returns {Promise<string[]>} Array of assignee logins\n */"}