{"chunk":1,"numChunks":2,"fileHash":"1zCGqhbgDomrRZLFU7BPN89ipu2igdNItv5wKm3dH8I=","filePath":"project-board-sync/src/config/board-rules.js","content":"const path = require('path');\nfunction mergeRuleScopes(automation) {\n    const merged = {};\n    \n    // Initialize merged object with all rule types from both scopes\n    const allRuleTypes = new Set();\n    \n    // Collect rule types from user scope\n    if (automation.user_scope?.rules) {\n        Object.keys(automation.user_scope.rules).forEach(ruleType => allRuleTypes.add(ruleType));\n    }\n    \n    // Collect rule types from repository scope\n    if (automation.repository_scope?.rules) {\n        Object.keys(automation.repository_scope.rules).forEach(ruleType => allRuleTypes.add(ruleType));\n    }\n    \n    // Initialize all rule types with empty arrays\n    allRuleTypes.forEach(ruleType => {\n        merged[ruleType] = [];\n    });\n\n    // Check if monitored users are properly configured\n    const monitoredUsers = getMonitoredUsers(automation);\n    \n    if (monitoredUsers && monitoredUsers.length > 0) {\n        // Merge user scope rules only if monitored users are configured\n        if (automation.user_scope?.rules) {\n            mergeRuleGroup(merged, automation.user_scope.rules);\n        }\n    } else {\n        // Log warning and skip user-scope rules\n        console.warn('⚠️  No monitored users configured. Skipping user-scope rules (board_items, assignees that depend on users).');\n        console.warn('   To enable user-based rules, configure monitored_users in automation.user_scope');\n    }\n\n    // Merge repository scope rules (always included)\n    if (automation.repository_scope?.rules) {\n        mergeRuleGroup(merged, automation.repository_scope.rules);\n    }\n\n    return merged;\n}\n/**\n * Extract monitored users from automation configuration\n * @param {object} automation The automation configuration\n * @returns {Array<string>|null} The monitored users array or null if not configured\n */"}