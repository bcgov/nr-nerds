{"chunk":4,"numChunks":6,"fileHash":"ekR43t/QtJIDB8YpwJyfHxWPLbmeXF1vyovB0cCsvtc=","filePath":"project-board-sync/test/url-resolution.test.js","content":"const test = require('node:test');\ntest('URL resolution functionality', async (t) => {\n  // Test 1: Valid GitHub project URL format\n  const validUrl = 'https://github.com/orgs/bcgov/projects/16';\n  const urlMatch = validUrl.match(/^https:\\/\\/github\\.com\\/orgs\\/([^\\/]+)\\/projects\\/(\\d+)$/);\n  assert(urlMatch, 'Should match valid GitHub project URL format');\n  assert.strictEqual(urlMatch[1], 'bcgov', 'Should extract organization name');\n  assert.strictEqual(urlMatch[2], '16', 'Should extract project number');\n  // Test 2: Invalid URL formats\n  const invalidUrls = [\n    'https://github.com/bcgov/projects/16', // Missing /orgs/\n    'https://github.com/orgs/bcgov/projects/', // Missing project number\n    'https://github.com/orgs/bcgov/projects/abc', // Non-numeric project number\n    'https://github.com/orgs/bcgov/projects/16/extra', // Extra path segments\n    'https://example.com/orgs/bcgov/projects/16', // Wrong domain\n  ];\n  for (const invalidUrl of invalidUrls) {\n    const match = invalidUrl.match(/^https:\\/\\/github\\.com\\/orgs\\/([^\\/]+)\\/projects\\/(\\d+)$/);\n    assert(!match, `Should not match invalid URL: ${invalidUrl}`);\n  }\n  // Test 3: URL resolution with mock (if we have API access)"}