{"chunk":3,"numChunks":15,"fileHash":"+gmoYfdkbC2PV76vr4sp0gIon+P84g0htDef3y71qAc=","filePath":"project-board-sync/src/utils/state-transition-validator.js","content":"/**\nclass StateTransitionValidator {\n  addColumnTransitionRule(from, to, conditions = []) {\n    try {\n      // Validate configuration loading step\n      this.steps.validateStepCompleted('CONFIG_LOADED');\n      \n      const sources = Array.isArray(from) ? from : [from];\n      for (const source of sources) {\n        const sourceLower = source.toLowerCase();\n        if (!this.columnRules.has(sourceLower)) {\n          this.columnRules.set(sourceLower, []);\n        }\n        \n        // Validate and document conditions\n        const validatedConditions = conditions.map(condition => {\n          const isValid = typeof condition === 'string' && (\n            condition === 'item.hasReviewers' ||\n            condition === 'item.hasAssignees' ||\n            condition === 'item.isMerged' ||\n            condition === 'item.isApproved'\n          );\n          if (!isValid) {\n            throw new Error(`Invalid condition format: ${condition}`);\n          }\n          return {\n            expression: condition,\n            description: this.getConditionDescription(condition),\n            dependencies: this.getConditionDependencies(condition)\n          };\n        });\n        \n        this.columnRules.get(sourceLower).push({\n          to,\n          conditions: validatedConditions,\n          addedAt: new Date()\n        });\n      }\n      \n      this.steps.markStepComplete('RULES_VALIDATED');\n    } catch (error) {\n      this.validationErrors.set(`${from}->${to}`, error);\n      throw error;\n    }\n  }\n  /**\n   * Check if a column transition is valid with enhanced error reporting\n   */"}