{"chunk":0,"numChunks":1,"fileHash":"TIb8sDmowX+m5xC3/qnD3wXY+aWVKYpezu4vs8Q+MxQ=","filePath":"project-board-sync/scripts/refresh-test-data.js","content":"#!/usr/bin/env node\n\n/**\n * Refresh test board data from the real project board\n * Usage: \n *   npm run refresh-test-data [--dry-run]\n */\n\nconst { fetchBoardData } = require('../test/mocks/board-data');\nconst fs = require('fs');\nconst path = require('path');\n\nconst isDryRun = process.argv.includes('--dry-run');\n\nasync function sanitizeItem(item) {\n  return {\n    ...item,\n    id: `test-${item.id.slice(-8)}`,\n    content: {\n      ...item.content,\n      title: `Test ${item.content.title}`,\n      repository: {\n        ...item.content.repository,\n        nameWithOwner: item.content.repository.nameWithOwner.replace(/bcgov\\//, 'test-org/')\n      }\n    }\n  };\n}\n\nasync function refreshTestData() {\n  try {\n    console.log('Fetching current board data...');\n    const data = await fetchBoardData();\n    \n    // Sanitize sensitive data\n    const sanitized = {\n      items: await Promise.all(data.items.nodes.map(sanitizeItem))\n    };\n\n    if (isDryRun) {\n      console.log('Dry run - would write:', JSON.stringify(sanitized, null, 2));\n      return;\n    }\n\n    const outputPath = path.join(__dirname, '../test/mocks/test-board.js');\n    const output = `/**\n * Mock board data generated from real project board\n * Last updated: ${new Date().toISOString()}\n * Use npm run refresh-test-data to update\n */\n\nmodule.exports = ${JSON.stringify(sanitized, null, 2)};\n`;\n\n    fs.writeFileSync(outputPath, output);\n    console.log('Updated test board data in:', outputPath);\n\n  } catch (error) {\n    console.error('Failed to refresh test data:', error.message);\n    process.exit(1);\n  }\n}\n\nrefreshTestData();\n"}