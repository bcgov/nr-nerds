{"chunk":5,"numChunks":7,"fileHash":"0iQzGoAU0H+H6xLyYWfFoCGgiAKMGgRiaRjoHR5A00s=","filePath":"project-board-sync/src/rules/linked-issues-processor.js","content":"/**\nasync function processLinkedIssues(pullRequest, projectId, currentColumn, currentSprint) {\n    for (const linkedIssue of linkedIssueNodes) {\n        try {\n            // Log initial state\n            const initialColumn = await getItemColumn(projectId, linkedIssueId);\n            const initialAssignees = await getItemAssignees(projectId, linkedIssueId);\n            \n            log.logState(linkedIssueId, 'Issue Initial', {\n                column: initialColumn,\n                assignees: initialAssignees\n            });\n\n            // Apply rule actions\n            for (const ruleAction of ruleActions) {\n                const { action, params } = ruleAction;\n                \n                switch (action) {\n                    case 'inherit_column':\n                        if (currentColumn && currentColumn !== initialColumn) {\n                            await setItemColumn(projectId, linkedIssueId, currentColumn);\n                            log.info(`Set linked issue #${linkedIssueNumber} column to ${currentColumn}`);\n                            changed = true;\n                        }\n                        break;\n                        \n                    case 'inherit_assignees':\n                        const prAssignees = pullRequest.assignees?.nodes?.map(a => a.login) || [];\n                        if (prAssignees.length > 0) {\n                            await setItemAssignees(projectId, linkedIssueId, prAssignees);\n                            log.info(`Set linked issue #${linkedIssueNumber} assignees to: ${prAssignees.join(', ')}`);\n                            changed = true;\n                        }\n                        break;\n                        \n                    default:\n                        log.warn(`Unknown linked issue action: ${action}`);\n                }\n            }\n\n            // Log final state\n            const finalColumn = await getItemColumn(projectId, linkedIssueId);\n            const finalAssignees = await getItemAssignees(projectId, linkedIssueId);\n            \n            log.logState(linkedIssueId, 'Issue Final', {\n                column: finalColumn,\n                assignees: finalAssignees\n            });\n\n            linkedIssueResults.push({\n                id: linkedIssueId,\n                number:"}