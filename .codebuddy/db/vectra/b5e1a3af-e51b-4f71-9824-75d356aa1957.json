{"chunk":3,"numChunks":6,"fileHash":"sGVMaJfcIDJOAwVasOyV2qc6sqjWFDAPwLbva694AYc=","filePath":"project-board-sync/src/utils/log.js","content":"/**\nclass Logger {\n  logState(itemId, context, state) {\n    // Format state values with improved undefined/null handling\n    const formattedState = {};\n    for (const [key, value] of Object.entries(state)) {\n      // Keep arrays as-is if they exist\n      if (Array.isArray(value)) {\n        formattedState[key] = value.length === 0 ? [] : value;\n        continue;\n      }\n      \n      // Special handling for other values\n      if (value === undefined || value === null) {\n        formattedState[key] = 'Not Set';\n      } else if (value === '') {\n        formattedState[key] = 'Empty';\n      } else {\n        formattedState[key] = value;\n      }\n    }\n\n    const entry = {\n      timestamp: new Date(),\n      itemId,\n      context,\n      state: formattedState\n    };\n    this.logs.states.push(entry);\n    console.log(`STATE [${context}] Item ${itemId}:`, JSON.stringify(formattedState, null, 2));\n  }\n  /**\n   * Compare states of an item before and after an operation\n   * @param {string} itemId The GitHub node ID of the item\n   * @returns {Object|null} The changes detected, or null if comparison not possible\n   */\n  getStateChanges(itemId) {\n    const states = this.logs.states.filter(s => s.itemId === itemId);\n    if (states.length < 2) return null;\n\n    const before = states[0].state;\n    const after = states[states.length - 1].state;\n    \n    const changes = {};\n    Object.keys(before).forEach(key => {\n      if (JSON.stringify(before[key]) !== JSON.stringify(after[key])) {\n        changes[key] = {\n          from: before[key],\n          to: after[key]\n        };\n      }\n    });\n    \n    return Object.keys(changes).length ? changes : null;\n  }\n  /**\n   * Print a summary of state changes at the end"}