const { test } = require('node:test');
const assert = require('node:assert/strict');

test('items from monitored repository rules', async (t) => {
    const { processBoardItemRules } = require('../board-items');
    // Setup test mocks
    const logMessages = [];
    
    // Mock required dependencies
    t.mock('../shared-validator', () => ({
        validator: {
            validateItemCondition: (item, trigger) => {
                if (trigger.condition === 'monitored.repos.includes(item.repository)') {
                    return ['nr-nerds', 'action-builder-ghcr'].includes(item.repository);
                }
                return false;
            }
        }
    }));
    
    t.mock('../../../config/board-rules', () => ({
        loadBoardRules: async () => ({
            rules: {
                board_items: [
                    {
                        name: "PullRequest by Repository",
                        description: "Add pull requests from monitored repositories",
                        trigger: {
                            type: "PullRequest",
                            condition: "monitored.repos.includes(item.repository)"
                        },
                        action: "add_to_board",
                        skip_if: "item.inProject"
                    },
                    {
                        name: "Issue by Repository",
                        description: "Add issues from monitored repositories",
                        trigger: {
                            type: "Issue",
                            condition: "monitored.repos.includes(item.repository)"
                        },
                        action: "add_to_board",
                        skip_if: "item.inProject"
                    }
                ]
            }
        })
    }));

    t.mock('../../../utils/log', () => ({
        log: {
            info: (msg) => logMessages.push(msg),
            debug: (msg) => logMessages.push(msg)
        }
    }));

    // Setup and clear logs before each test
    t.beforeEach(() => {
        logMessages.length = 0;
    });

    await t.test('adds PR from monitored repository', async () => {
        const pr = {
            __typename: 'PullRequest',
            number: 123,
            repository: 'nr-nerds',
            projectItems: { nodes: [] }
        };

        const actions = await processBoardItemRules(pr);
        
        // Verify actions
        assert.equal(actions.length, 1, 'should add PR to board');
        assert.equal(actions[0].action, 'add_to_board', 'action should be add_to_board');
        assert.deepEqual(actions[0].params, { item: pr }, 'should include PR in params');

        // Verify logging
        assert.ok(logMessages.some(msg => msg.includes('Adding PullRequest #123 to board')), 
            'should log board addition');
    });

    await t.test('adds Issue from monitored repository', async () => {
        const issue = {
            __typename: 'Issue',
            number: 456,
            repository: 'nr-nerds',
            projectItems: { nodes: [] }
        };

        const actions = await processBoardItemRules(issue);
        
        // Verify actions
        assert.equal(actions.length, 1, 'should add Issue to board');
        assert.equal(actions[0].action, 'add_to_board', 'action should be add_to_board');
        assert.deepEqual(actions[0].params, { item: issue }, 'should include Issue in params');

        // Verify logging
        assert.ok(logMessages.some(msg => msg.includes('Adding Issue #456 to board')), 
            'should log board addition');
    });

    await t.test('skips PR from unmonitored repository', async () => {
        const pr = {
            __typename: 'PullRequest',
            number: 123,
            repository: 'other-repo',
            projectItems: { nodes: [] }
        };

        const actions = await processBoardItemRules(pr);
        
        // Verify actions
        assert.equal(actions.length, 0, 'should skip PR from unmonitored repo');

        // Verify no add_to_board action logged
        assert.ok(!logMessages.some(msg => msg.includes('Adding PullRequest #123 to board')),
            'should not log board addition');
    });

    await t.test('skips Issue when already in project', async () => {
        const issue = {
            __typename: 'Issue',
            number: 456,
            repository: 'nr-nerds',
            projectItems: { nodes: [{ id: 'some-id' }] }
        };

        const actions = await processBoardItemRules(issue);
        
        // Verify actions
        assert.equal(actions.length, 0, 'should skip Issue already in project');

        // Verify logging
        assert.ok(logMessages.some(msg => msg.includes('Skipping Issue #456 - Already in project')),
            'should log skip reason');
    });
});
